LABEL FOR _tigermain: _tigermain
ADDED _tigermain
Todos los frags:
_tigermain:
LABEL L4
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP FP,
   CONST ~8)),
 TEMP ARG1)
MOVE(
 TEMP T0,
 CONST 10)
LABEL L1
CJUMP(GT,
 TEMP T0,
 CONST 10,
 L2,L0)
LABEL L0
MOVE(
 TEMP RV,
 CONST 0)
JUMP( NAME L3)
LABEL L2
JUMP( NAME L0)
LABEL L5
MOVE(
 TEMP T1,
 CONST 11)
MOVE(
 TEMP T0,
 BINOP(MINUS,
  TEMP T0,
  CONST 1))
JUMP( NAME L1)
LABEL L3
----------------
ADDING (_tigermain,)
Leng frame: 2
_tigermain: 
L4: 
movq ARG1, -8(FP)
movq $10, T0 
L1: 
movq $10, T2 
cmp T2, T0 
jg L2 
L0: 
movq $0, RV 
jmp L3 
L2: 
jmp L0 
L5: 
movq $11, T1 
movq T0, T3
movq $1, T4 
sub T4, T3
movq T3, T0 
jmp L1 
L3: 
22::f433
1
poniendo noddes: SP, FP
poniendo noddes: FP, T0
poniendo noddes: SP, T0
poniendo noddes: FP, T2
poniendo noddes: SP, T2
poniendo noddes: T0, T2
poniendo noddes: FP, RV
poniendo noddes: SP, RV
poniendo noddes: FP, T1
poniendo noddes: SP, T1
poniendo noddes: T0, T1
poniendo noddes: FP, T3
poniendo noddes: SP, T3
poniendo noddes: FP, T4
poniendo noddes: SP, T4
poniendo noddes: T3, T4

 esto es: initial
 {T0 ,T1 ,T2 ,T3 ,T4 ,}
nodeMoves: T1 -> Move que no esta realacionado con otro temporario
nodeMoves: T2 -> Move que no esta realacionado con otro temporario
nodeMoves: T4 -> Move que no esta realacionado con otro temporario

 esto es: color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> 
Nodo: T1 -> 
Nodo: T2 -> 
Nodo: T3 -> 
Nodo: T4 -> 
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}

 esto es: degree
 {Nodo: FP -> Valor: 1000
Nodo: T0 -> Valor: 4
Nodo: RV -> Valor: 1000
Nodo: T1 -> Valor: 3
Nodo: T2 -> Valor: 3
Nodo: T3 -> Valor: 3
Nodo: T4 -> Valor: 3
Nodo: SP -> Valor: 1000
}

 esto es: moveList
 {MOVE: FP,FP
MOVE: T0,T3
MOVE: T3,T0
MOVE: T0,T3
MOVE: T3,T0
MOVE: SP,SP
}

 esto es: spillWorklist
 {}

 esto es: simplifyWorklist
 {T1 ,T2 ,T4 ,}

 esto es: freezeWorklist
 {T0 ,T3 ,}

 esto es: adjList
 {Nodo: FP -> 
Nodo: T0 -> vecinos: FPvecinos: SPvecinos: T1vecinos: T2
Nodo: T1 -> vecinos: FPvecinos: SPvecinos: T0
Nodo: T2 -> vecinos: FPvecinos: SPvecinos: T0
Nodo: T3 -> vecinos: FPvecinos: SPvecinos: T4
Nodo: T4 -> vecinos: FPvecinos: SPvecinos: T3
}

 esto es: worklistMoves
 { MOVE: SP,SP
MOVE: FP,FP
MOVE: T0,T3
MOVE: T3,T0
}

 esto es: activeMoves
 { }

 esto es: Stack
 {}
addWorklist SP
addWorklist FP
app1
addWorklist T0
addWorklist T0
AssignColorsT0

 esto es: lista adj
 {FP ,SP ,T1 ,T2 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T1
getAlias de: T2
inserto en color: T0
AssignColorsT4

 esto es: lista adj
 {FP ,SP ,T3 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T3
inserto en color: T4
AssignColorsT2

 esto es: lista adj
 {FP ,SP ,T0 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T0
inserto en color: T2
AssignColorsT1

 esto es: lista adj
 {FP ,SP ,T0 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T0
inserto en color: T1
getAlias de T3 es T0

 esto es: spilledNodes
 {}

 esto es: Color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 1
Nodo: T2 -> Color: 1
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}
Acumm (true): 0
3::f433
0
poniendo noddes: SP, FP

 esto es: initial
 {}

 esto es: color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 1
Nodo: T2 -> Color: 1
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}

 esto es: degree
 {Nodo: FP -> Valor: 1000
Nodo: SP -> Valor: 1000
}

 esto es: moveList
 {MOVE: FP,FP
MOVE: SP,SP
}

 esto es: spillWorklist
 {}

 esto es: simplifyWorklist
 {}

 esto es: freezeWorklist
 {}

 esto es: adjList
 {Nodo: FP -> 
}

 esto es: worklistMoves
 { MOVE: SP,SP
MOVE: FP,FP
}

 esto es: activeMoves
 { }

 esto es: Stack
 {}
addWorklist SP
addWorklist FP
getAlias de T3 es T0

 esto es: spilledNodes
 {}

 esto es: Color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 1
Nodo: T2 -> Color: 1
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}
Acumm (false): 25
TEMP -> REG: SP -> %rsp
TEMP -> REG: SP -> %rsp
TEMP -> REG: FP -> %rbp
TEMP -> REG: FP -> %rbp
TEMP -> REG: T3 -> %rax
TEMP -> REG: T0 -> %rax
TEMP -> REG: T0 -> %rax
TEMP -> REG: T3 -> %rax
TEMP -> REG: SP -> %rsp
TEMP -> REG: SP -> %rsp
TEMP -> REG: FP -> %rbp
TEMP -> REG: FP -> %rbp
Limpiados MOV con igual src y dst
TEMP -> REG: ARG1 -> %rdi
TEMP -> REG: FP -> %rbp
TEMP -> REG: T0 -> %rax
TEMP -> REG: T2 -> %rbx
TEMP -> REG: T2 -> %rbx
TEMP -> REG: T0 -> %rax
TEMP -> REG: RV -> %rax
TEMP -> REG: T1 -> %rbx
TEMP -> REG: T4 -> %rbx
TEMP -> REG: T4 -> %rbx
TEMP -> REG: T3 -> %rax
.globl _tigermain
.type _tigermain, @function
_tigermain: 
pushq %rbp
movq %rsp, %rbp
subq $40, %rsp
jmp L4
L4: 
movq %rdi, -8(%rbp)
movq $10, %rax 
L1: 
movq $10, %rbx 
cmp %rbx, %rax 
jg L2 
L0: 
movq $0, %rax 
jmp L3 
L2: 
jmp L0 
L5: 
movq $11, %rbx 
movq $1, %rbx 
sub %rbx, %rax
jmp L1 
L3: 
leave
ret
.size _tigermain, .-_tigermain

 bien!
yes!!
