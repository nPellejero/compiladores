LABEL FOR _tigermain: _tigermain
ADDED _tigermain
Todos los frags:
_tigermain:
LABEL L1
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP FP,
   CONST ~8)),
 TEMP ARG1)
MOVE(
 TEMP T0,
 CONST 0)
MOVE(
 TEMP T0,
 BINOP(PLUS,
  BINOP(PLUS,
   BINOP(PLUS,
    CONST 1,
    CONST 2),
   CONST 3),
  CONST 4))
MOVE(
 TEMP RV,
 CONST 0)
JUMP( NAME L0)
LABEL L0
----------------
ADDING (_tigermain,)
Leng frame: 2
_tigermain: 
L1: 
movq ARG1, -8(FP)
movq $0, T0 
movq $1, T4 
movq T4, T3
movq $2, T5 
addq T5, T3
movq T3, T2
movq $3, T6 
addq T6, T2
movq T2, T1
movq $4, T7 
addq T7, T1
movq T1, T0 
movq $0, RV 
jmp L0 
L0: 
20::f433
1
poniendo noddes: SP, FP
poniendo noddes: FP, T0
poniendo noddes: SP, T0
poniendo noddes: FP, T4
poniendo noddes: SP, T4
poniendo noddes: FP, T3
poniendo noddes: SP, T3
poniendo noddes: FP, T5
poniendo noddes: SP, T5
poniendo noddes: T3, T5
poniendo noddes: FP, T2
poniendo noddes: SP, T2
poniendo noddes: FP, T6
poniendo noddes: SP, T6
poniendo noddes: T2, T6
poniendo noddes: FP, T1
poniendo noddes: SP, T1
poniendo noddes: FP, T7
poniendo noddes: SP, T7
poniendo noddes: T1, T7
poniendo noddes: FP, RV
poniendo noddes: SP, RV

 esto es: initial
 {T0 ,T1 ,T2 ,T3 ,T4 ,T5 ,T6 ,T7 ,}
nodeMoves: T5 -> Move que no esta realacionado con otro temporario
nodeMoves: T6 -> Move que no esta realacionado con otro temporario
nodeMoves: T7 -> Move que no esta realacionado con otro temporario

 esto es: color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> 
Nodo: T1 -> 
Nodo: T2 -> 
Nodo: T3 -> 
Nodo: T4 -> 
Nodo: T5 -> 
Nodo: T6 -> 
Nodo: T7 -> 
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}

 esto es: degree
 {Nodo: FP -> Valor: 1000
Nodo: T0 -> Valor: 2
Nodo: RV -> Valor: 1000
Nodo: T1 -> Valor: 3
Nodo: T2 -> Valor: 3
Nodo: T3 -> Valor: 3
Nodo: T4 -> Valor: 2
Nodo: T5 -> Valor: 3
Nodo: T6 -> Valor: 3
Nodo: T7 -> Valor: 3
Nodo: SP -> Valor: 1000
}

 esto es: moveList
 {MOVE: FP,FP
MOVE: T0,T1
MOVE: T0,T1
MOVE: T1,T2
MOVE: T1,T2
MOVE: T2,T3
MOVE: T2,T3
MOVE: T3,T4
MOVE: T3,T4
MOVE: SP,SP
}

 esto es: spillWorklist
 {}

 esto es: simplifyWorklist
 {T5 ,T6 ,T7 ,}

 esto es: freezeWorklist
 {T0 ,T1 ,T2 ,T3 ,T4 ,}

 esto es: adjList
 {Nodo: FP -> 
Nodo: T0 -> vecinos: FPvecinos: SP
Nodo: T1 -> vecinos: FPvecinos: SPvecinos: T7
Nodo: T2 -> vecinos: FPvecinos: SPvecinos: T6
Nodo: T3 -> vecinos: FPvecinos: SPvecinos: T5
Nodo: T4 -> vecinos: FPvecinos: SP
Nodo: T5 -> vecinos: FPvecinos: SPvecinos: T3
Nodo: T6 -> vecinos: FPvecinos: SPvecinos: T2
Nodo: T7 -> vecinos: FPvecinos: SPvecinos: T1
}

 esto es: worklistMoves
 { MOVE: SP,SP
MOVE: FP,FP
MOVE: T0,T1
MOVE: T1,T2
MOVE: T2,T3
MOVE: T3,T4
}

 esto es: activeMoves
 { }

 esto es: Stack
 {}
addWorklist SP
addWorklist FP
app1
addWorklist T0
app1
addWorklist T0
app1
addWorklist T0
app1
addWorklist T0
AssignColorsT0

 esto es: lista adj
 {FP ,SP ,}
getAlias de: FP
getAlias de: SP
inserto en color: T0
AssignColorsT7

 esto es: lista adj
 {FP ,SP ,T1 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T1
inserto en color: T7
AssignColorsT6

 esto es: lista adj
 {FP ,SP ,T2 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T2
inserto en color: T6
AssignColorsT5

 esto es: lista adj
 {FP ,SP ,T3 ,}
getAlias de: FP
getAlias de: SP
getAlias de: T3
inserto en color: T5
getAlias de T1 es T0
getAlias de T2 es T0
getAlias de T3 es T0
getAlias de T4 es T0

 esto es: spilledNodes
 {}

 esto es: Color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 0
Nodo: T2 -> Color: 0
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 0
Nodo: T5 -> Color: 1
Nodo: T6 -> Color: 1
Nodo: T7 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}
Acumm (true): 0
3::f433
0
poniendo noddes: SP, FP

 esto es: initial
 {}

 esto es: color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 0
Nodo: T2 -> Color: 0
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 0
Nodo: T5 -> Color: 1
Nodo: T6 -> Color: 1
Nodo: T7 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}

 esto es: degree
 {Nodo: FP -> Valor: 1000
Nodo: SP -> Valor: 1000
}

 esto es: moveList
 {MOVE: FP,FP
MOVE: SP,SP
}

 esto es: spillWorklist
 {}

 esto es: simplifyWorklist
 {}

 esto es: freezeWorklist
 {}

 esto es: adjList
 {Nodo: FP -> 
}

 esto es: worklistMoves
 { MOVE: SP,SP
MOVE: FP,FP
}

 esto es: activeMoves
 { }

 esto es: Stack
 {}
addWorklist SP
addWorklist FP
getAlias de T1 es T0
getAlias de T2 es T0
getAlias de T3 es T0
getAlias de T4 es T0

 esto es: spilledNodes
 {}

 esto es: Color
 {Nodo: FP -> Color: 14
Nodo: RDX -> Color: 10
Nodo: ARG1 -> Color: 8
Nodo: ARG2 -> Color: 9
Nodo: ARG3 -> Color: 10
Nodo: ARG4 -> Color: 11
Nodo: ARG5 -> Color: 12
Nodo: ARG6 -> Color: 13
Nodo: RAX -> Color: 0
Nodo: RBX -> Color: 1
Nodo: RV -> Color: 0
Nodo: T0 -> Color: 0
Nodo: T1 -> Color: 0
Nodo: T2 -> Color: 0
Nodo: T3 -> Color: 0
Nodo: T4 -> Color: 0
Nodo: T5 -> Color: 1
Nodo: T6 -> Color: 1
Nodo: T7 -> Color: 1
Nodo: R10 -> Color: 2
Nodo: R11 -> Color: 3
Nodo: R12 -> Color: 4
Nodo: R13 -> Color: 5
Nodo: SP -> Color: 15
Nodo: R14 -> Color: 6
Nodo: R15 -> Color: 7
}
Acumm (false): 23
TEMP -> REG: SP -> %rsp
TEMP -> REG: SP -> %rsp
TEMP -> REG: FP -> %rbp
TEMP -> REG: FP -> %rbp
TEMP -> REG: T1 -> %rax
TEMP -> REG: T0 -> %rax
TEMP -> REG: T2 -> %rax
TEMP -> REG: T1 -> %rax
TEMP -> REG: T3 -> %rax
TEMP -> REG: T2 -> %rax
TEMP -> REG: T4 -> %rax
TEMP -> REG: T3 -> %rax
TEMP -> REG: SP -> %rsp
TEMP -> REG: SP -> %rsp
TEMP -> REG: FP -> %rbp
TEMP -> REG: FP -> %rbp
Limpiados MOV con igual src y dst
TEMP -> REG: ARG1 -> %rdi
TEMP -> REG: FP -> %rbp
TEMP -> REG: T0 -> %rax
TEMP -> REG: T4 -> %rax
TEMP -> REG: T5 -> %rbx
TEMP -> REG: T5 -> %rbx
TEMP -> REG: T3 -> %rax
TEMP -> REG: T6 -> %rbx
TEMP -> REG: T6 -> %rbx
TEMP -> REG: T2 -> %rax
TEMP -> REG: T7 -> %rbx
TEMP -> REG: T7 -> %rbx
TEMP -> REG: T1 -> %rax
TEMP -> REG: RV -> %rax
.globl _tigermain
.type _tigermain, @function
_tigermain: 
pushq %rbp
movq %rsp, %rbp
subq $40, %rsp
jmp L1
L1: 
movq %rdi, -8(%rbp)
movq $0, %rax 
movq $1, %rax 
movq $2, %rbx 
addq %rbx, %rax
movq $3, %rbx 
addq %rbx, %rax
movq $4, %rbx 
addq %rbx, %rax
movq $0, %rax 
jmp L0 
L0: 
leave
ret
.size _tigermain, .-_tigermain

 bien!
yes!!
